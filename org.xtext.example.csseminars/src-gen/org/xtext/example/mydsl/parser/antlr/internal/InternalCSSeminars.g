/*
 * generated by Xtext
 */
grammar InternalCSSeminars;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.CSSeminarsGrammarAccess;

}

@parser::members {

 	private CSSeminarsGrammarAccess grammarAccess;
 	
    public InternalCSSeminarsParser(TokenStream input, CSSeminarsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DepartmentSeminars";	
   	}
   	
   	@Override
   	protected CSSeminarsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDepartmentSeminars
entryRuleDepartmentSeminars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDepartmentSeminarsRule()); }
	 iv_ruleDepartmentSeminars=ruleDepartmentSeminars 
	 { $current=$iv_ruleDepartmentSeminars.current; } 
	 EOF 
;

// Rule DepartmentSeminars
ruleDepartmentSeminars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentSeminarsAccess().getGroupsGroupParserRuleCall_0_0()); 
	    }
		lv_groups_0_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentSeminarsRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_0_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentSeminarsAccess().getUsersMemberParserRuleCall_1_0()); 
	    }
		lv_users_1_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentSeminarsRule());
	        }
       		add(
       			$current, 
       			"users",
        		lv_users_1_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDepartmentSeminarsAccess().getSeminarsSeminarParserRuleCall_2_0()); 
	    }
		lv_seminars_2_0=ruleSeminar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDepartmentSeminarsRule());
	        }
       		add(
       			$current, 
       			"seminars",
        		lv_seminars_2_0, 
        		"Seminar");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='group' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupAccess().getGroupKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGroupAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getGroupAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='member' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMemberAccess().getMemberKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_surname_2_0=RULE_ID
		{
			newLeafNode(lv_surname_2_0, grammarAccess.getMemberAccess().getSurnameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"surname",
        		lv_surname_2_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getMemberAccess().getGroupGroupCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleSeminar
entryRuleSeminar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSeminarRule()); }
	 iv_ruleSeminar=ruleSeminar 
	 { $current=$iv_ruleSeminar.current; } 
	 EOF 
;

// Rule Seminar
ruleSeminar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='seminar' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSeminarAccess().getSeminarKeyword_0());
    }
(
(
		lv_title_1_0=RULE_ID
		{
			newLeafNode(lv_title_1_0, grammarAccess.getSeminarAccess().getTitleIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSeminarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSeminarAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSeminarRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSeminarAccess().getOrganizersMemberCrossReference_3_0()); 
	}

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSeminarAccess().getCommaKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSeminarRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getSeminarAccess().getOrganizersMemberCrossReference_4_1_0()); 
	}

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSeminarAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='date' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSeminarAccess().getDateKeyword_6());
    }
this_DATE_8=RULE_DATE
    { 
    newLeafNode(this_DATE_8, grammarAccess.getSeminarAccess().getDATETerminalRuleCall_7()); 
    }
	otherlv_9='duration' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSeminarAccess().getDurationKeyword_8());
    }
this_HOUR_10=RULE_HOUR
    { 
    newLeafNode(this_HOUR_10, grammarAccess.getSeminarAccess().getHOURTerminalRuleCall_9()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSeminarAccess().getTalksTalkParserRuleCall_10_0()); 
	    }
		lv_talks_11_0=ruleTalk		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSeminarRule());
	        }
       		add(
       			$current, 
       			"talks",
        		lv_talks_11_0, 
        		"Talk");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTalk
entryRuleTalk returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTalkRule()); }
	 iv_ruleTalk=ruleTalk 
	 { $current=$iv_ruleTalk.current; } 
	 EOF 
;

// Rule Talk
ruleTalk returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='talk' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTalkAccess().getTalkKeyword_0());
    }
(
(
		lv_title_1_0=RULE_ID
		{
			newLeafNode(lv_title_1_0, grammarAccess.getTalkAccess().getTitleIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTalkAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTalkAccess().getPresentersMemberCrossReference_3_0()); 
	}

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTalkAccess().getCommaKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getTalkAccess().getPresentersMemberCrossReference_4_1_0()); 
	}

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTalkAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='abstract' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTalkAccess().getAbstractKeyword_6());
    }
this_STRING_8=RULE_STRING
    { 
    newLeafNode(this_STRING_8, grammarAccess.getTalkAccess().getSTRINGTerminalRuleCall_7()); 
    }
(	otherlv_9='duration' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTalkAccess().getDurationKeyword_8_0());
    }
(
(
		lv_duration_10_0=RULE_HOUR
		{
			newLeafNode(lv_duration_10_0, grammarAccess.getTalkAccess().getDurationHOURTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTalkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_10_0, 
        		"HOUR");
	    }

)
))?)
;





RULE_DATE : RULE_INT '/' RULE_INT '/' RULE_INT;

RULE_HOUR : RULE_INT ':' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


