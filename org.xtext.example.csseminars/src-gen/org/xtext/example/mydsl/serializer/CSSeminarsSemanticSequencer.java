/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.cSSeminars.CSSeminarsPackage;
import org.xtext.example.mydsl.cSSeminars.DepartmentSeminars;
import org.xtext.example.mydsl.cSSeminars.Group;
import org.xtext.example.mydsl.cSSeminars.Member;
import org.xtext.example.mydsl.cSSeminars.Seminar;
import org.xtext.example.mydsl.cSSeminars.Talk;
import org.xtext.example.mydsl.services.CSSeminarsGrammarAccess;

@SuppressWarnings("all")
public class CSSeminarsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CSSeminarsGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CSSeminarsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CSSeminarsPackage.DEPARTMENT_SEMINARS:
				sequence_DepartmentSeminars(context, (DepartmentSeminars) semanticObject); 
				return; 
			case CSSeminarsPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case CSSeminarsPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			case CSSeminarsPackage.SEMINAR:
				sequence_Seminar(context, (Seminar) semanticObject); 
				return; 
			case CSSeminarsPackage.TALK:
				sequence_Talk(context, (Talk) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (groups+=Group* users+=Member* seminars+=Seminar*)
	 */
	protected void sequence_DepartmentSeminars(EObject context, DepartmentSeminars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING)
	 */
	protected void sequence_Group(EObject context, Group semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CSSeminarsPackage.Literals.GROUP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CSSeminarsPackage.Literals.GROUP__NAME));
			if(transientValues.isValueTransient(semanticObject, CSSeminarsPackage.Literals.GROUP__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CSSeminarsPackage.Literals.GROUP__DESCRIPTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getGroupAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGroupAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID surname=ID group=[Group|ID])
	 */
	protected void sequence_Member(EObject context, Member semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CSSeminarsPackage.Literals.MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CSSeminarsPackage.Literals.MEMBER__NAME));
			if(transientValues.isValueTransient(semanticObject, CSSeminarsPackage.Literals.MEMBER__SURNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CSSeminarsPackage.Literals.MEMBER__SURNAME));
			if(transientValues.isValueTransient(semanticObject, CSSeminarsPackage.Literals.MEMBER__GROUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CSSeminarsPackage.Literals.MEMBER__GROUP));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMemberAccess().getSurnameIDTerminalRuleCall_2_0(), semanticObject.getSurname());
		feeder.accept(grammarAccess.getMemberAccess().getGroupGroupIDTerminalRuleCall_3_0_1(), semanticObject.getGroup());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (title=ID organizers+=[Member|ID] organizers+=[Member|ID]* talks+=Talk+)
	 */
	protected void sequence_Seminar(EObject context, Seminar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (title=ID presenters+=[Member|ID] presenters+=[Member|ID]* duration=HOUR?)
	 */
	protected void sequence_Talk(EObject context, Talk semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
